name: CI for Cou-commerce

on:
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      HEALTHCHECK_TIMEOUT: 120   # 각 시도별 최대 대기 시간(초)
      HEALTHCHECK_INTERVAL: 3    # 헬스체크 간격(초)
      HEALTHCHECK_RETRIES: 3     # 최대 재시도 횟수
      SERVICES_TO_CHECK: "mysql redis"  # 헬스체크 대상 컨테이너 목록

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --------------------------
      #  Docker Compose 서비스 시작
      # --------------------------
      - name: Start MySQL service
        run: |
          cd $GITHUB_WORKSPACE/infra/mysql
          docker compose up -d

      - name: Start Redis service
        run: |
          cd $GITHUB_WORKSPACE/infra/redis
          docker compose up -d

      # --------------------------
      #  서비스 헬스체크
      # --------------------------
      - name: Wait for all services to be healthy
        run: |
          echo "Waiting for services to be healthy: $SERVICES_TO_CHECK"
          attempt=1
          while [ $attempt -le $HEALTHCHECK_RETRIES ]; do
            echo "Attempt $attempt of $HEALTHCHECK_RETRIES"
            end=$((SECONDS + HEALTHCHECK_TIMEOUT))
            while [ $SECONDS -lt $end ]; do
              all_healthy=true
              for service in $SERVICES_TO_CHECK; do
                status=$(docker inspect --format='{{.State.Health.Status}}' $service 2>/dev/null || echo "unhealthy")
                echo "$service: $status"
                if [ "$status" != "healthy" ]; then
                  all_healthy=false
                fi
              done
              if [ "$all_healthy" = true ]; then
                echo "All services are healthy!"
                exit 0
              fi
              sleep $HEALTHCHECK_INTERVAL
            done
            echo "Not all services are healthy, restarting..."
            cd $GITHUB_WORKSPACE/infra/mysql && docker compose restart
            cd $GITHUB_WORKSPACE/infra/redis && docker compose restart
            attempt=$((attempt + 1))
          done
          echo "Error: Services failed to become healthy"
          cd $GITHUB_WORKSPACE/infra/mysql && docker compose logs
          cd $GITHUB_WORKSPACE/infra/redis && docker compose logs
          exit 1

      # --------------------------
      #  JDK 및 Gradle 설정
      # --------------------------
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-java-24-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-java-24-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # --------------------------
      #  Build & Test
      # --------------------------
      - name: Build and Test with Gradle
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/coucommercedb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
          SPRING_DATASOURCE_USERNAME: app
          SPRING_DATASOURCE_PASSWORD: app-secret
        run: ./gradlew build

      # --------------------------
      #  보고서 업로드
      # --------------------------
      - name: Upload Checkstyle Report on failure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: build/reports/checkstyle/*.html
          if-no-files-found: warn

      - name: Upload Test Report on failure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/
          if-no-files-found: warn

      # --------------------------
      #  서비스 종료
      # --------------------------
      - name: Tear down MySQL and Redis
        if: always()
        run: |
          cd $GITHUB_WORKSPACE/infra/mysql && docker compose down
          cd $GITHUB_WORKSPACE/infra/redis && docker compose down
